/*
* （1） 从第一个元素开始，该元素可以认为已经被排序

 （2） 取出下一个元素，在已经排序的元素序列中从后向前扫描

 （3） 如果该元素（已排序）大于新元素，将该元素移到下一位置

 （4） 重复步骤3，直到找到已排序的元素小于或者等于新元素的位置

 （5）将新元素插入到下一位置中

 （6） 重复步骤2*/

    function insertSort(ele){
        //假设第0个元素是一个有序数列。第一个以后的是无序的序列
        //所以从第一个元素开始将无序数列的元素插入到有序数列中去
        for(var i=1;i<ele.length;i++){
            //升序
            if(ele[i]<ele[i-1]){
                //取出无序数列中第i个作为插入元素
                var guard=ele[i];
                //记住有序数列的最后一个位置，并且将有序数列位置扩大一个
                var j=i-1;
                ele[i]=ele[j];
                //比较大小，找到被插入元素所在位置
                while(j>=0&&guard<ele[j]){
                    ele[j+1]=ele[j];
                    j--;
                }
                ele[j+1]=guard;//插入
            }

        }
    }


    var arr=[3, 2, 4, 9, 1, 5, 7, 6, 8];
    var arrSorted=insertSort(arr);
    console.log(arrSorted);